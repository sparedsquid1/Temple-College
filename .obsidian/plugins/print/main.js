/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var _=Object.create;var m=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var H=(e,i)=>()=>(i||e((i={exports:{}}).exports,i),i.exports),j=(e,i)=>{for(var t in i)m(e,t,{get:i[t],enumerable:!0})},A=(e,i,t,s)=>{if(i&&typeof i=="object"||typeof i=="function")for(let n of O(i))!U.call(e,n)&&n!==t&&m(e,n,{get:()=>i[n],enumerable:!(s=B(i,n))||s.enumerable});return e};var G=(e,i,t)=>(t=e!=null?_(R(e)):{},A(i||!e||!e.__esModule?m(t,"default",{value:e,enumerable:!0}):t,e)),W=e=>A(m({},"__esModule",{value:!0}),e);var I=H(d=>{"use strict";Object.defineProperty(d,"__esModule",{value:!0});d.Printd=d.createIFrame=d.createLinkStyle=d.createStyle=void 0;var q=/^(((http[s]?)|file):)?(\/\/)+([0-9a-zA-Z-_.=?&].+)$/,Y=/^((\.|\.\.)?\/)([0-9a-zA-Z-_.=?&]+\/)*([0-9a-zA-Z-_.=?&]+)$/,k=function(e){return q.test(e)||Y.test(e)};function x(e,i){var t=e.createElement("style");return t.appendChild(e.createTextNode(i)),t}d.createStyle=x;function N(e,i){var t=e.createElement("link");return t.type="text/css",t.rel="stylesheet",t.href=i,t}d.createLinkStyle=N;function L(e){var i=window.document.createElement("iframe");return i.setAttribute("src","about:blank"),i.setAttribute("style","visibility:hidden;width:0;height:0;position:absolute;z-index:-9999;bottom:0;"),i.setAttribute("width","0"),i.setAttribute("height","0"),i.setAttribute("wmode","opaque"),e.appendChild(i),i}d.createIFrame=L;var J={parent:window.document.body,headElements:[],bodyElements:[]},D=function(){function e(i){this.isLoading=!1,this.hasEvents=!1,this.opts=[J,i||{}].reduce(function(t,s){return Object.keys(s).forEach(function(n){return t[n]=s[n]}),t},{}),this.iframe=L(this.opts.parent)}return e.prototype.getIFrame=function(){return this.iframe},e.prototype.print=function(i,t,s,n){if(!this.isLoading){var r=this.iframe,a=r.contentDocument,p=r.contentWindow;if(!(!a||!p)&&(this.iframe.src="about:blank",this.elCopy=i.cloneNode(!0),!!this.elCopy)){this.isLoading=!0,this.callback=n;var o=p.document;o.open(),o.write('<!DOCTYPE html><html><head><meta charset="utf-8"></head><body></body></html>'),this.addEvents();var f=this.opts,g=f.headElements,z=f.bodyElements;Array.isArray(g)&&g.forEach(function(c){return o.head.appendChild(c)}),Array.isArray(z)&&z.forEach(function(c){return o.body.appendChild(c)}),Array.isArray(t)&&t.forEach(function(c){c&&o.head.appendChild(k(c)?N(o,c):x(o,c))}),o.body.appendChild(this.elCopy),Array.isArray(s)&&s.forEach(function(c){if(c){var C=o.createElement("script");k(c)?C.src=c:C.innerText=c,o.body.appendChild(C)}}),o.close()}}},e.prototype.printURL=function(i,t){this.isLoading||(this.addEvents(),this.isLoading=!0,this.callback=t,this.iframe.src=i)},e.prototype.onBeforePrint=function(i){this.onbeforeprint=i},e.prototype.onAfterPrint=function(i){this.onafterprint=i},e.prototype.launchPrint=function(i){this.isLoading||i.print()},e.prototype.addEvents=function(){var i=this;if(!this.hasEvents){this.hasEvents=!0,this.iframe.addEventListener("load",function(){return i.onLoad()},!1);var t=this.iframe.contentWindow;t&&(this.onbeforeprint&&t.addEventListener("beforeprint",this.onbeforeprint),this.onafterprint&&t.addEventListener("afterprint",this.onafterprint))}},e.prototype.onLoad=function(){var i=this;if(this.iframe){this.isLoading=!1;var t=this.iframe,s=t.contentDocument,n=t.contentWindow;if(!s||!n)return;typeof this.callback=="function"?this.callback({iframe:this.iframe,element:this.elCopy,launchPrint:function(){return i.launchPrint(n)}}):this.launchPrint(n)}},e}();d.Printd=D;d.default=D});var K={};j(K,{default:()=>v});module.exports=W(K);var l=require("obsidian");var h=require("obsidian");var E=require("obsidian");async function w(e,i,t){var a;let s=e.vault.adapter,n="",r="";if(i.dir){let p=`${i.dir}/styles.css`;try{n=await s.read(p)}catch(o){new E.Notice("Default styling could not be located.")}}else new E.Notice("Could not find the plugin path. No default print styles will be added.");return y(e)&&T(e)&&(r=(a=Z(e))!=null?a:""),`
        body { font-size: ${t.fontSize}; }
        h1 { font-size: ${t.h1Size}; }
        h2 { font-size: ${t.h2Size}; }
        h3 { font-size: ${t.h3Size}; }
        h4 { font-size: ${t.h4Size}; }
        h5 { font-size: ${t.h5Size}; }
        h6 { font-size: ${t.h6Size}; }
        hr { page-break-before: ${t.hrPageBreaks?"always":"auto"}; border-width: ${t.hrPageBreaks?"0":"revert-layer"}; }
        ${n}
        ${r}
    `}function Z(e){let i=".obsidian/snippets/print.css";return e.customCss.csscache.get(i)}function T(e){return e.customCss.enabledSnippets.has("print")}function y(e){return e.customCss.snippets.contains("print")}var b=class extends h.PluginSettingTab{constructor(t,s){super(t,s);this.plugin=s}display(){let{containerEl:t}=this;t.empty(),new h.Setting(t).setName("Print note title").setDesc("Include the note title in the printout.").addToggle(n=>n.setValue(this.plugin.settings.printTitle).onChange(async r=>{this.plugin.settings.printTitle=r,await this.plugin.saveSettings()})),new h.Setting(t).setName("Font size").setDesc("Set the font size for the printed note.").addText(n=>n.setPlaceholder("14px").setValue(this.plugin.settings.fontSize).onChange(async r=>{this.plugin.settings.fontSize=r,await this.plugin.saveSettings()})),["h1Size","h2Size","h3Size","h4Size","h5Size","h6Size"].forEach((n,r)=>{new h.Setting(t).setName(`Heading ${r+1} size`).setDesc(`Set the size for <h${r+1}> elements.`).addText(a=>a.setPlaceholder(`${this.plugin.settings[n]}`).setValue(this.plugin.settings[n]).onChange(async p=>{this.plugin.settings[n]=p,await this.plugin.saveSettings()}))}),new h.Setting(t).setName("Combine folder notes").setDesc("When printing a folder, combine all notes into a single document. If disabled, each note will start on a new page.").addToggle(n=>n.setValue(this.plugin.settings.combineFolderNotes).onChange(async r=>{this.plugin.settings.combineFolderNotes=r,await this.plugin.saveSettings()})),new h.Setting(t).setName("Treat horizontal lines as page breaks").setDesc("Enable this option to interpret horizontal lines (---) as page breaks ").addToggle(n=>n.setValue(this.plugin.settings.hrPageBreaks).onChange(async r=>{this.plugin.settings.hrPageBreaks=r,await this.plugin.saveSettings()})),new h.Setting(t).setName("Debug mode").setDesc("Enable debug mode. This will open the print window for inspection.").addToggle(n=>n.setValue(this.plugin.settings.debugMode).onChange(async r=>{this.plugin.settings.debugMode=r,await this.plugin.saveSettings()})),new h.Setting(t).setName("Custom CSS").setDesc('You can add a custom "print.css" to "Appearance > CSS snippets", then this toggle will be enabled and synced with CSS snippets. The easier way is to add your styles using @media print {body {...}}.').addToggle(n=>n.setValue(y(this.app)&&T(this.app)).onChange(async r=>{this.app.customCss.setCssEnabledStatus("print",r),await this.plugin.saveSettings()})).setDisabled(!y(this.app))}};var F={printTitle:!0,fontSize:"14px",h1Size:"20px",h2Size:"18px",h3Size:"16px",h4Size:"14px",h5Size:"14px",h6Size:"12px",combineFolderNotes:!1,hrPageBreaks:!1,debugMode:!1,usePreview:!0};var $=G(I());async function S(e,i,t){let s=document.createElement("html"),n=document.createElement("head"),r=document.createElement("title");if(r.textContent="Print note",n.appendChild(r),i.debugMode){let o=document.createElement("style");o.textContent=t,n.appendChild(o)}s.appendChild(n);let a=document.createElement("body");if(a.className="obsidian-print",a.appendChild(e),s.appendChild(a),i.debugMode){let{remote:o}=window.require("electron"),f=new o.BrowserWindow({width:800,height:600,show:!0,webPreferences:{nodeIntegration:!0,contextIsolation:!1}}),g=s.outerHTML;f.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(g)}`),f.webContents.on("did-finish-load",()=>{f.webContents.openDevTools()})}new $.Printd().print(s,[t])}var u=require("obsidian");async function P(e,i,t){let s=createDiv();try{if(i&&e instanceof u.TFile){let a=s.createEl("h1");a.textContent=e.basename}let n,r="";return e instanceof u.TFile?(n=await t.vault.cachedRead(e),r=e.path):n=e,await u.MarkdownRenderer.render(t,n,s,r,new u.Component),s.addClass("obsidian-print-note"),s}catch(n){new u.Notice("Failed to generate preview content."),console.error("Preview generation error:",n);return}}var M=require("obsidian");async function V(e){let i=e.workspace.getActiveFile();if(i){let t=i.parent;if(t instanceof M.TFolder)return t}return null}var v=class extends l.Plugin{async onload(){console.log("Print plugin loaded"),this.settings=Object.assign({},F,await this.loadData()),this.addCommand({id:"print-note",name:"Current note",callback:async()=>await this.printNote()}),this.addCommand({id:"print-selection",name:"Print selection",callback:async()=>await this.printSelection()}),this.addCommand({id:"print-folder-notes",name:"All notes in current folder",callback:async()=>await this.printFolder()}),this.addSettingTab(new b(this.app,this)),this.addRibbonIcon("printer","Print note",async()=>{await this.printNote()}),this.registerEvent(this.app.workspace.on("file-menu",(t,s)=>{s instanceof l.TFile?t.addItem(n=>{n.setTitle("Print note").setIcon("printer").onClick(async()=>await this.printNote(s))}):t.addItem(n=>{n.setTitle("Print all notes in folder").setIcon("printer").onClick(async()=>await this.printFolder(s))})})),this.registerEvent(this.app.workspace.on("editor-menu",t=>{t.addItem(s=>{s.setTitle("Print note").setIcon("printer").onClick(async()=>await this.printNote())}),t.addItem(s=>{s.setTitle("Print selection").setIcon("printer").onClick(async()=>await this.printSelection())})}))}async printNote(t){if((!t||t===this.app.workspace.getActiveFile())&&(t=await this.saveActiveFile()),!t){new l.Notice("No note to print.");return}let s=await P(t,this.settings.printTitle,this.app);if(!s)return;let n=await w(this.app,this.manifest,this.settings);await S(s,this.settings,n)}async printSelection(){let t=this.app.workspace.getActiveViewOfType(l.MarkdownView);if(!t){new l.Notice("No active note.");return}let s=t.editor.getSelection();if(!s){new l.Notice("No text selected.");return}let n=await P(s,!1,this.app);if(!n)return;let r=await w(this.app,this.manifest,this.settings);await S(n,this.settings,r)}async printFolder(t){t||await this.saveActiveFile();let s=t||await V(this.app);if(!s){new l.Notice("Could not resolve folder.");return}let n=s.children.filter(p=>p instanceof l.TFile&&p.extension==="md");if(n.length===0){new l.Notice("No markdown files found in the folder.");return}let r=createDiv();for(let p of n){let o=await P(p,this.settings.printTitle,this.app);!o||(this.settings.combineFolderNotes||o.addClass("obsidian-print-page-break"),r.append(o))}let a=await w(this.app,this.manifest,this.settings);await S(r,this.settings,a)}async saveActiveFile(){let t=this.app.workspace.getActiveViewOfType(l.MarkdownView);return t&&await t.save(),this.app.workspace.getActiveFile()}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */